require 'playerMod'
require 'uiMod'

gameControllerMod = {
    curScore = 0,
    winScore = 10,
    
    pickupCount = 10,
    pickupScore = 1,
    
    allPickups = {}
}

function gameControllerMod.win()
    return gameControllerMod.curScore >= gameControllerMod.winScore
end

---@type UnityEngine.GameObject
local pickupPrefab = nil

local function initLevel()
    local levelPrefab = CS.AssetBundleManger.LoadGameObject('Level')
    
    ---@type UnityEngine.GameObject
    local level = GO.Instantiate(levelPrefab)
    level.transform.position = UE.Vector3(0, -1, 0)
end

local function onGameWin()
    print('WIN')
    
    uiMod.ShowWinUI()
end

local function onPickedUp(pickupId)
    local pickup = gameControllerMod.allPickups[pickupId]

    pickup.gameObject:SetActive(false)
    pickup.isActive = false

    gameControllerMod.curScore = gameControllerMod.curScore + gameControllerMod.pickupScore
    
    uiMod.UpdateScore(gameControllerMod.curScore)

    if gameControllerMod.win() then
        onGameWin()
    end
end

---@param pickup UnityEngine.GameObject
local function initPickup(pickup)
    local all = gameControllerMod.allPickups
    local newId = pickup.name
    
    all[newId] = {
        gameObject = pickup,
        id = newId,
        isActive = true
    }
    
    ---@type TriggerBehaviour
    local triggerBehaviour = pickup:GetComponent(typeof(CS.TriggerBehaviour))
    
    ---@param other UnityEngine.Collider
    local fun = function(other)
        if not other.gameObject:CompareTag('Player') then
            return
        end
        
        print('[Trigger Enter] ' .. tostring(newId) .. '\t' .. other.gameObject.name)
        onPickedUp(newId)
    end
    
    triggerBehaviour:triggerEnter('+', fun)
end

local function spawnPickups()
    if pickupPrefab == nil then
        pickupPrefab = CS.AssetBundleManger.LoadGameObject('Pickup')
    end
    
    local center = UE.Vector3.zero
    local centerForward = UE.Vector3.forward
    local radius = 7
    local startingPos = center + (centerForward * radius)
    local deltaAngle = 360 / gameControllerMod.pickupCount
    local curAngle = 0
    
    for i = 1, gameControllerMod.pickupCount do
        curAngle = curAngle + deltaAngle
        local pos = UE.Quaternion.Euler(0, curAngle, 0) * startingPos
        
        local newPickup = GO.Instantiate(pickupPrefab, pos, UE.Quaternion.identity)
        newPickup.name = 'Pickup ' .. tostring(i)
        
        initPickup(newPickup)
    end
end

function gameControllerMod.init()
    uiMod.Init()
    
    initLevel()
    
    playerMod.init()

    spawnPickups()
end

function gameControllerMod.update(dt)
    for _, v in pairs(gameControllerMod.allPickups) do
        if v.isActive then
            ---@type UnityEngine.Transform
            local transform = v.gameObject.transform
            transform:Rotate(UE.Vector3(30, 40, 50) * dt)
        end
    end
end
